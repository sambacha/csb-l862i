{"version":3,"sources":["components/Graph.jsx","components/Home.jsx","App.jsx","index.js"],"names":["debtChange","price","entry","initial_lev","initSize","initialDebt","calcDebt","debtChangePosition","debt","calcPositionValue","lev","size","Math","sqrt","calcPositionDelta","Initialsize","calcPositionDeltaUSD","initialSize","init","Graph","useState","setEntry","setLev","amt","UPPER","pow","LOWER","domain","data","start","stop","step","Array","ceil","fill","map","x","y","range","current","IL","price0","price1","ILETH","ΔDebtUSD","ILUSD","ΔPositionDebt","LineChart","width","height","padding","CartesianGrid","strokeDasharray","XAxis","type","scale","dataKey","allowDataOverflow","Label","value","dy","style","textAnchor","YAxis","angle","position","Legend","verticalAlign","Line","stroke","Tooltip","span","min","max","defaultValue","onChange","console","log","styled","input","Home","App","className","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.75c72022.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  LineChart,\r\n  Legend,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Label\r\n} from \"recharts\";\r\nimport { InputNumber, Slider, Row, Col } from \"antd\";\r\nimport styled from \"styled-components\";\r\n\r\nconst range = (start, stop, step = 0) =>\r\n  Array(Math.ceil((stop - start) / step))\r\n    .fill(start)\r\n    .map((x, y) => x + y * step);\r\n\r\nconst il = (price0, price1) => {\r\n  return 2 * (Math.sqrt(price1 / price0) / (1 + price1 / price0)) - 1;\r\n};\r\n\r\nconst debtChange = function (price, entry, initial_lev, initSize) {\r\n  if (initial_lev <= 1) return 0;\r\n  const initialDebt = calcDebt(entry, initial_lev, initSize);\r\n  const currentDebt = calcDebt(price, initial_lev, initSize);\r\n  return (currentDebt - initialDebt) / initialDebt;\r\n};\r\n\r\nconst debtChangePosition = (price, entry, initial_lev, initSize) => {\r\n  if (initial_lev <= 1) return 0;\r\n  const debt = initSize - initSize / initial_lev;\r\n  const currentPositionValue = calcPositionValue(initSize, price, entry);\r\n  const initialPositionValue = calcPositionValue(initSize, entry, entry);\r\n  return (currentPositionValue - initialPositionValue) / debt;\r\n};\r\n\r\nconst calcDebt = (price, lev, size) => price * (size - size / lev);\r\n\r\nconst calcPositionValue = (size, price, entry) =>\r\n  size * Math.sqrt(entry / price);\r\n\r\nconst calcPositionDelta = (price, entry, Initialsize) => {\r\n  const val = calcPositionValue(Initialsize, price, entry);\r\n  return (val - Initialsize) / Initialsize;\r\n};\r\n\r\nconst calcPositionDeltaUSD = (price, entry, initialSize) => {\r\n  const val = calcPositionValue(initialSize, price, entry) * price;\r\n  const init = initialSize * entry;\r\n  return (val - init) / init;\r\n};\r\n\r\nexport default function Graph() {\r\n  const [entry, setEntry] = useState(2100);\r\n  const [lev, setLev] = useState(3);\r\n  const [amt, setInitialAmt] = useState(1);\r\n  const initSize = amt * lev;\r\n  const [UPPER, LOWER, STEP] = [\r\n    entry * Math.pow(2, 1),\r\n    entry * Math.pow(0.5, 1),\r\n    (entry * Math.pow(2, 1)) / 20\r\n  ];\r\n  const domain = [LOWER, UPPER];\r\n  const data = range(LOWER, UPPER, STEP).map((current) => {\r\n    return {\r\n      price: current,\r\n      IL: il(current, entry),\r\n      ILETH: calcPositionDelta(current, entry, initSize),\r\n      ΔDebtUSD: debtChange(current, entry, lev, initSize),\r\n      ILUSD: calcPositionDeltaUSD(current, entry, initSize),\r\n      ΔPositionDebt: debtChangePosition(current, entry, lev, initSize)\r\n    };\r\n  });\r\n\r\n  function onEntryChange(value) {\r\n    setEntry(value);\r\n    console.log(\"changed\", value);\r\n  }\r\n  function onLevSliderChange(value) {\r\n    setLev(value);\r\n    console.log(\"changed\", value);\r\n  }\r\n  return (\r\n    <>\r\n      <LineChart width={600} height={300} padding={10} data={data}>\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis\r\n          type=\"number\"\r\n          scale=\"log\"\r\n          dataKey=\"price\"\r\n          domain={domain}\r\n          allowDataOverflow=\"true\"\r\n        >\r\n          <Label\r\n            value=\"Price\"\r\n            dy={12}\r\n            padding={10}\r\n            style={{ textAnchor: \"middle\" }}\r\n          />\r\n        </XAxis>\r\n        <YAxis domain={[-1, 1]} allowDataOverflow=\"true\">\r\n          <Label\r\n            angle={-90}\r\n            value=\"Δ Liquidity Value\"\r\n            position=\"insideLeft\"\r\n            style={{ textAnchor: \"middle\" }}\r\n          />\r\n        </YAxis>\r\n        <Legend verticalAlign=\"bottom\" height={24} />\r\n        <Line type=\"monotone\" dataKey=\"IL\" stroke=\"#122582\" />\r\n        {/* <Line type=\"monotone\" dataKey=\"ILETH\" stroke=\"#018a18\" /> */}\r\n        <Line type=\"monotone\" dataKey=\"ILUSD\" stroke=\"#03c2fc\" />\r\n\r\n        {/* <Line type=\"monotone\" dataKey=\"ΔDebtUSD\" stroke=\"#fcba03\" /> */}\r\n\r\n        <Line type=\"monotone\" dataKey=\"ΔPositionDebt\" stroke=\"#ff2626\" />\r\n        <Tooltip />\r\n      </LineChart>\r\n      <Row>\r\n        <Col span={4}>{\"Entry Price\"}</Col>\r\n        <Col span={4}>\r\n          <InputNumber\r\n            min={1}\r\n            max={50000}\r\n            defaultValue={2100}\r\n            onChange={onEntryChange}\r\n          />\r\n        </Col>\r\n        <Col span={2}>{\"Leverage\"}</Col>\r\n        <Col span={1}></Col>\r\n        <Col span={6}>\r\n          <Slider\r\n            defaultValue={1}\r\n            min={1}\r\n            max={4}\r\n            onChange={onLevSliderChange}\r\n            step={0.1}\r\n          />\r\n        </Col>\r\n        <Col span={1}></Col>\r\n        <Col span={2}>{lev}</Col>\r\n      </Row>\r\n    </>\r\n  );\r\n}\r\n\r\nconst Input = styled.input`\r\n  font-size: 18px;\r\n  padding: 10px;\r\n  margin: 10px;\r\n  background: \"#e6e6e6\";\r\n  border-color: black;\r\n  border-radius: 3px;\r\n  ::placeholder {\r\n    color: gray;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport Graph from \"./Graph\";\r\n\r\nexport default function Home() {\r\n  return (\r\n    <div style={{ padding: 16 }}>\r\n      <Graph />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport { Home } from \"./components\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"antd/dist/antd.css\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}